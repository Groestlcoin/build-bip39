{"version":3,"sources":["webpack:///./src/styles.js","webpack:///./src/components/WordSelector.js","webpack:///./src/wordlists/index.js","webpack:///./src/utils.js","webpack:///./src/pages/index.js"],"names":["colors","breakpoints","Container","styled","div","withConfig","displayName","componentId","WordSelect","input","WordIndexLabel","label","SelectOpenIcon","IoIosArrowDown","OptionsContainer","SearchInput","SearchIcon","IoIosSearch","SearchClearIcon","IoIosCloseCircle","WordOption","handleClick","_this$props","_this","props","word","onSelect","handleMouseEnter","_this$props2","index","onHighlight","render","_this$props3","this","highlighted","selected","style","react_default","a","createElement","onMouseEnter","onClick","className","cx","React","Component","WordSelector","_this2","_React$Component2","call","handleOutsideClick","e","state","showOptions","containerRef","current","contains","target","hideOptions","_this2$props","wordList","setState","highlightedOptionIndex","indexOf","scrollToSelection","search","options","searchRef","focus","listRef","scrollToItem","handleSearch","query","value","normalized","toLowerCase","filter","sort","b","handleClearSearch","stopPropagation","handleKeyDown","key","shiftKey","_this2$state","length","handleSelect","selectRef","handleHover","i","selectedWord","_this2$props2","onChange","renderWordOption","_ref","data","WordSelector_WordOption","createRef","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","_this$state","_this$props4","indexDisplay","inputName","ref","type","name","placeholder","autoComplete","readOnly","onKeyDown","htmlFor","index_esm","itemData","itemCount","itemSize","height","width","innerElementType","border","overflowX","position","zIndex","backgroundColor","en","require","ENTROPY_BITS_MAP","24","21","18","15","12","LENGTH_OPTIONS","zeroFill","str","targetLen","binaryToHex","binaryString","match","map","chunk","parseInt","toString","join","getDetails","words","mnemonicLength","selectedWords","selectedLength","isCompleted","entropyLength","Error","extraBits","checksumLength","validLastWordCount","Math","pow","binaryStringWithoutLastWord","substr","entropyBinary","entropy","binary","hex","checksum","hash","shajs","update","digest","firstBits","validLastWords","_toConsumableArray","Array","val","binaryIndex","Number","getSeed","passphrase","pbkdf2","pbkdf2Sync","reduce","prev","curr","Title","h1","Header","h2","Subheader","span","CenteredRow","CountContainer","RadioGroupLabel","CountLabel","CountRadio","attrs","GenerateButton","button","ResetButton","FlexRow","FlexItem","DetailsContainer","WordWithIndex","DetailsLabel","LongString","WordCount","count","isSelected","checked","App","_React$Component","handleCountChange","wordCount","updatedWords","pages_toConsumableArray","details","Object","assign","seed","handleGenerate","_this$state2","crypto","msCrypto","randomNumbersRequired","randomNumbers","getRandomValues","Uint32Array","hexEncoded","forEach","rand","result","decimalIndex","push","generateRandomMnemonic","handleReset","handleChange","_this$state3","handlePassphrase","handlePassphraseDebounce","debounce","renderWordWithIndex","listIndex","WORDLIST","_this$state4","wordSelectors","entropyBits","leftoverBits","totalBits","isLastWord","components_WordSelector","disabled","pages_Container","Helmet","content","pages_WordCount","href","io_index_esm","size"],"mappings":"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","file":"component---src-pages-index-js-631c9d3c8f7d3e674006.js","sourcesContent":["// color pallete\nconst blue = '#0060cb';\nconst grayLight = '#eee';\nconst grayMedium = '#999';\nconst grayDark = '#222';\nconst white = '#fff';\n\nexport const colors = {\n    bgPrimary: white,\n    bgSecondary: grayLight,\n    bgAccent: blue,\n    bgSelected: blue,\n    bgInverse: grayDark,\n    bgHover: grayLight,\n    textPrimary: grayDark,\n    textSecondary: grayMedium,\n    textAccent: white,\n    textSelected: white,\n    textInverse: white,\n};\n\nexport const breakpoints = {\n    phone: 'max-width: 400px',\n    tablet: 'max-width: 800px',\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FixedSizeList as List } from 'react-window';\nimport { IoIosCloseCircle, IoIosArrowDown, IoIosSearch } from 'react-icons/io';\nimport cx from 'classnames';\n\nimport { colors, breakpoints } from '../styles';\n\nconst Container = styled.div`\n    position: relative;\n    ul {\n        margin: 0;\n        padding: 0;\n        > li {\n            display: flex;\n            align-items: center;\n            padding: 0 8px;\n            cursor: default;\n            &.highlighted {\n                background-color: ${colors.bgHover};\n            }\n            &.selected {\n                color: ${colors.textSelected};\n                background-color: ${colors.bgSelected};\n            }\n        }\n    }\n`;\n\nconst WordSelect = styled.input`\n    display: block;\n    border: 1px solid;\n    border-radius: 3px;\n    font-size: 16px;\n    padding: 8px 14px;\n    width: 100%;\n    cursor: pointer;\n    -webkit-appearance: none;\n    @media (${breakpoints.phone}) {\n        font-size: 13px;\n        padding: 6px 12px;\n    }\n`;\n\nconst WordIndexLabel = styled.label`\n    position: absolute;\n    top: -8px;\n    left: -8px;\n    height: 16px;\n    width: 16px;\n    font-size: 10px;\n    border-radius: 3px;\n    background-color: ${colors.bgInverse};\n    color: ${colors.textInverse};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst SelectOpenIcon = styled(IoIosArrowDown)`\n    position: absolute;\n    top: 5px;\n    right: 0;\n    padding: 4px;\n    font-size: 20px;\n    cursor: pointer;\n    @media (${breakpoints.phone}) {\n        top: 6px;\n        font-size: 13px;\n    }\n`;\n\nconst OptionsContainer = styled.div`\n    position: absolute;\n    width: 100%;\n    z-index: 1;\n    margin-top: 2px;\n`;\n\nconst SearchInput = styled.input`\n    display: block;\n    outline: none;\n    width: 100%;\n    border: 1px solid ${colors.textSecondary};\n    border-width: 1px 1px 0;\n    border-radius: 0;\n    margin: 0;\n    padding: 8px 24px;\n    font-size: 12px;\n    -webkit-appearance: none;\n    @media (${breakpoints.tablet}) {\n        font-size: 16px;\n        padding: 8px 20px;\n    }\n`; // prevent input zoom on iPhone\n\nconst SearchIcon = styled(IoIosSearch)`\n    position: absolute;\n    top: 8px;\n    left: 4px;\n    font-size: 16px;\n    @media (${breakpoints.tablet}) {\n        top: 10px;\n    }\n`;\n\nconst SearchClearIcon = styled(IoIosCloseCircle)`\n    position: absolute;\n    top: 5px;\n    right: 0;\n    padding: 4px;\n    color: ${colors.textSecondary};\n    font-size: 16px;\n    cursor: pointer;\n`;\n\nclass WordOption extends React.Component {\n    handleClick = () => {\n        const { word, onSelect } = this.props;\n        onSelect && onSelect(word);\n    };\n\n    handleMouseEnter = () => {\n        const { index, onHighlight } = this.props;\n        onHighlight && onHighlight(index);\n    };\n\n    render() {\n        const { word, highlighted, selected, style } = this.props;\n        return (\n            <li\n                onMouseEnter={this.handleMouseEnter}\n                onClick={this.handleClick}\n                className={cx({\n                    highlighted,\n                    selected,\n                })}\n                style={style}\n            >\n                {word}\n            </li>\n        );\n    }\n}\n\nclass WordSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.containerRef = React.createRef();\n        this.listRef = React.createRef();\n        this.selectRef = React.createRef();\n        this.searchRef = React.createRef();\n        this.state = {\n            options: props.wordList,\n            search: '',\n            showOptions: false,\n            highlightedOptionIndex: null,\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('click', this.handleOutsideClick);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('click', this.handleOutsideClick);\n    }\n\n    componentDidUpdate(prevProps) {\n        const wordList = this.props.wordList;\n        if (prevProps.wordList !== wordList) {\n            this.setState({\n                options: wordList,\n            });\n        }\n    }\n\n    handleOutsideClick = e => {\n        const { showOptions } = this.state;\n        if (showOptions && !this.containerRef.current.contains(e.target)) {\n            this.hideOptions();\n        }\n    };\n\n    showOptions = e => {\n        const { word, wordList } = this.props;\n        this.setState(\n            {\n                showOptions: true,\n                highlightedOptionIndex: word ? wordList.indexOf(word) : null,\n            },\n            this.scrollToSelection\n        );\n    };\n\n    hideOptions = () => {\n        this.setState({\n            showOptions: false,\n            highlightedOptionIndex: null,\n            search: '',\n            options: this.props.wordList,\n        });\n    };\n\n    scrollToSelection = () => {\n        const { options } = this.state;\n        const { word } = this.props;\n        this.searchRef.current.focus();\n        if (word) {\n            const index = options.indexOf(word);\n            this.listRef.current.scrollToItem(index, 'center');\n        }\n    };\n\n    handleClick = e => {\n        const { showOptions } = this.state;\n        if (!showOptions) {\n            this.showOptions();\n        } else {\n            this.hideOptions();\n        }\n    };\n\n    handleSearch = e => {\n        const query = e.target.value || '';\n        const normalized = query.toLowerCase();\n        const { wordList } = this.props;\n        this.setState({\n            search: query,\n            options:\n                query === ''\n                    ? wordList\n                    : wordList\n                          .filter(word => word.indexOf(normalized) >= 0)\n                          .sort((a, b) => {\n                              return (\n                                  a.indexOf(normalized) - b.indexOf(normalized)\n                              );\n                          }),\n            highlightedOptionIndex: 0,\n        });\n        this.listRef.current.scrollToItem(0);\n    };\n\n    handleClearSearch = e => {\n        e.stopPropagation();\n        this.setState(\n            {\n                search: '',\n                options: this.props.wordList,\n            },\n            this.showOptions\n        );\n    };\n\n    handleKeyDown = e => {\n        const { key, shiftKey, target } = e;\n        const { options, showOptions, highlightedOptionIndex } = this.state;\n        if (!showOptions && (key === 'Enter' || key === 'ArrowDown')) {\n            this.showOptions();\n            return;\n        }\n        if (key === 'ArrowDown') {\n            if (highlightedOptionIndex === null) {\n                this.setState({ highlightedOptionIndex: 0 });\n            } else if (highlightedOptionIndex < options.length - 1) {\n                this.setState({\n                    highlightedOptionIndex: highlightedOptionIndex + 1,\n                });\n                this.listRef.current.scrollToItem(highlightedOptionIndex + 1);\n            }\n        } else if (key === 'ArrowUp' && highlightedOptionIndex > 0) {\n            this.setState({\n                highlightedOptionIndex: highlightedOptionIndex - 1,\n            });\n            this.listRef.current.scrollToItem(highlightedOptionIndex - 1);\n        } else if (key === 'Enter') {\n            const word = options[highlightedOptionIndex];\n            if (word) {\n                this.handleSelect(word);\n            } else {\n                this.hideOptions();\n                this.selectRef.current.focus();\n            }\n        } else if (key === 'Escape') {\n            this.hideOptions();\n            this.selectRef.current.focus();\n        } else if (\n            key === 'Tab' &&\n            ((!shiftKey && target === this.searchRef.current) ||\n                (shiftKey && target === this.selectRef.current))\n        ) {\n            // hide options if tabbing out of component\n            this.hideOptions();\n        }\n    };\n\n    handleHover = i => {\n        this.setState({\n            highlightedOptionIndex: i,\n        });\n    };\n\n    handleSelect = selectedWord => {\n        const { onChange, wordList, word, index } = this.props;\n        this.setState({\n            search: '',\n            options: wordList,\n            highlightedOptionIndex: index,\n            showOptions: false,\n        });\n        if (selectedWord !== word) {\n            onChange &&\n                onChange({\n                    word: selectedWord,\n                    index,\n                });\n        }\n    };\n\n    renderWordOption = ({ data, index, style }) => {\n        const { highlightedOptionIndex } = this.state;\n        const selectedWord = this.props.word;\n        const word = data[index];\n        return (\n            <WordOption\n                style={style}\n                word={word}\n                index={index}\n                selected={selectedWord === word}\n                highlighted={index === highlightedOptionIndex}\n                onHighlight={this.handleHover}\n                onSelect={this.handleSelect}\n            />\n        );\n    };\n\n    render() {\n        const { options, search, showOptions } = this.state;\n        const { index, indexDisplay, word } = this.props;\n        const inputName = `word${index}`;\n\n        return (\n            <Container ref={this.containerRef}>\n                <WordSelect\n                    ref={this.selectRef}\n                    type=\"text\"\n                    name={inputName}\n                    placeholder={`Word ${indexDisplay}`}\n                    autoComplete=\"off\"\n                    readOnly={true}\n                    value={word}\n                    onClick={this.handleClick}\n                    onKeyDown={this.handleKeyDown}\n                />\n                <WordIndexLabel htmlFor={inputName}>\n                    {indexDisplay}\n                </WordIndexLabel>\n                <SelectOpenIcon onClick={this.handleClick} />\n                {showOptions ? (\n                    <OptionsContainer>\n                        <SearchInput\n                            ref={this.searchRef}\n                            type=\"text\"\n                            value={search}\n                            onChange={this.handleSearch}\n                            onKeyDown={this.handleKeyDown}\n                        />\n                        <SearchIcon />\n                        {search !== '' ? (\n                            <SearchClearIcon onClick={this.handleClearSearch} />\n                        ) : null}\n                        <List\n                            ref={this.listRef}\n                            itemData={options}\n                            itemCount={options.length}\n                            itemSize={26}\n                            height={250}\n                            width=\"100%\"\n                            innerElementType=\"ul\"\n                            style={{\n                                border: '1px solid',\n                                overflowX: 'hidden',\n                                position: 'absolute',\n                                zIndex: 1,\n                                backgroundColor: colors.bgPrimary,\n                            }}\n                        >\n                            {this.renderWordOption}\n                        </List>\n                    </OptionsContainer>\n                ) : null}\n            </Container>\n        );\n    }\n}\n\nexport default WordSelector;\n","export const en = require('./english.json');\n\nexport default en;\n","import shajs from 'sha.js';\nimport pbkdf2 from 'pbkdf2';\n\nexport const ENTROPY_BITS_MAP = {\n    '24': 256,\n    '21': 224,\n    '18': 192,\n    '15': 160,\n    '12': 128,\n};\n\nexport const LENGTH_OPTIONS = [24, 21, 18, 15, 12];\n\nexport function zeroFill(str = '', targetLen = 0) {\n    while (str.length < targetLen) {\n        str = '0' + str;\n    }\n    return str;\n}\n\n/**\n * Converts binary strings to hex strings in 32 bit chunks. Only works with strings with length divisible by 32 for this specific use case.\n *\n * @param {string} binaryString - string of length divisible by 32, consisting of 0's and 1's\n * @return {string} - string encoded as hexidecimal\n *\n */\nexport function binaryToHex(binaryString = '') {\n    const chunks = binaryString.match(/.{1,32}/g) || []; // split into array of 32 bit chunks\n    return chunks\n        .map(chunk => zeroFill(parseInt(chunk, 2).toString(16), 8))\n        .join('');\n}\n\n/**\n * Maps word selections back to raw data, and determines valid last words (due to them being based on a checksum)\n *\n * @param {string[]} words - Array of words, must have length of desired mnemonic\n * @param {string[]} wordList - BIP 39 wordlist, 2048 words to choose from\n * @return {{ isCompleted: boolean, entropy: { binary: string, hex: string }, checksum: { hash: string, firstBits: string, length: number }, validLastWords: string[]}} isCompleted: no empty or falsy values in the words array, entropy: binary and hex encodings of concatenated word indexes, checksum: SHA-256 hash of entropy, validLastWords: given n-1 words, a list of words that are valid for the last word\n *\n */\nexport function getDetails(words = [], wordList = []) {\n    const mnemonicLength = words.length;\n    const selectedWords = words.filter(word => !!word);\n    const selectedLength = selectedWords.length;\n    const isCompleted = mnemonicLength === selectedLength;\n\n    if (selectedLength < mnemonicLength - 1) {\n        return {\n            isCompleted,\n        };\n    }\n\n    const entropyLength = ENTROPY_BITS_MAP[mnemonicLength];\n    if (!entropyLength) {\n        throw new Error(\n            'Invalid words array. Must be one of the following lengths: ' +\n                LENGTH_OPTIONS.join()\n        );\n    }\n    const extraBits = entropyLength - 11 * (mnemonicLength - 1);\n    const checksumLength = mnemonicLength * 11 - entropyLength;\n    const validLastWordCount = Math.pow(2, extraBits);\n\n    const binaryIndexes = selectedWords.map(word => {\n        const index = wordList.indexOf(word);\n        return zeroFill(index.toString(2), 11);\n    });\n    const binaryString = binaryIndexes.join('');\n    const binaryStringWithoutLastWord = binaryString.substr(\n        0,\n        entropyLength - extraBits\n    );\n    const entropyBinary = binaryString.substr(0, entropyLength);\n    const entropy = isCompleted\n        ? {\n              binary: entropyBinary,\n              hex: binaryToHex(entropyBinary),\n          }\n        : {};\n    const checksum = isCompleted\n        ? {\n              hash: shajs('sha256')\n                  .update(binaryToHex(entropyBinary), 'hex')\n                  .digest('hex'),\n              firstBits: binaryString.substr(entropyLength, checksumLength),\n              length: checksumLength,\n          }\n        : {};\n\n    const validLastWords = [...new Array(validLastWordCount)].map((val, i) => {\n        const binaryIndex = zeroFill(Number(i).toString(2), extraBits);\n        const hex = binaryToHex(binaryStringWithoutLastWord + binaryIndex);\n        const hash = shajs('sha256')\n            .update(hex, 'hex')\n            .digest('hex');\n        const checksum = zeroFill(\n            parseInt(hash.substr(0, 2), 16).toString(2),\n            8\n        ).substr(0, checksumLength);\n        const wordIndex = binaryIndex + checksum;\n        return wordList[parseInt(wordIndex, 2)];\n    });\n\n    return {\n        isCompleted,\n        entropy,\n        checksum,\n        validLastWords,\n    };\n}\n\nexport function generateRandomMnemonic(length = 24, wordList = []) {\n    if (wordList.length === 0) {\n        throw new Error('Array of 2048 words is required');\n    }\n    const crypto = window.crypto || window.msCrypto;\n    const entropyLength = ENTROPY_BITS_MAP[length];\n    const checksumLength = length * 11 - entropyLength;\n    // js random number limited to 32 bits, so need to concat for larger number\n    const randomNumbersRequired = entropyLength / 32;\n    const randomNumbers = crypto.getRandomValues(\n        new Uint32Array(randomNumbersRequired)\n    );\n    let entropy = '';\n    let hexEncoded = '';\n\n    randomNumbers.forEach(rand => {\n        // convert to binary and hex strings\n        let binary = rand.toString(2);\n        let hex = rand.toString(16);\n        // left pad 0's\n        binary = zeroFill(binary, 32);\n        hex = zeroFill(hex, 8);\n        entropy += binary;\n        hexEncoded += hex;\n    });\n\n    // get checksum (first n bits of sha256 hash to complete 11 bit word indexes)\n    const hash = shajs('sha256')\n        .update(hexEncoded, 'hex')\n        .digest('hex');\n    const checksum = zeroFill(\n        parseInt(hash.substr(0, 2), 16).toString(2),\n        8\n    ).substr(0, checksumLength);\n    const result = entropy + checksum;\n    // map to words\n    const words = [];\n    for (let i = 0; i < length; i++) {\n        let binaryIndex = result.substr(i * 11, 11);\n        let decimalIndex = parseInt(binaryIndex, 2);\n        words.push(wordList[decimalIndex]);\n    }\n    return words;\n}\n\nexport function getSeed(words = [], passphrase = '') {\n    return pbkdf2\n        .pbkdf2Sync(\n            words.join(' '),\n            'mnemonic' + (passphrase || ''),\n            2048,\n            64,\n            'sha512'\n        )\n        .reduce((prev, curr) => prev + zeroFill(curr.toString(16), 2), '');\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Helmet } from 'react-helmet';\n\nimport WordSelector from '../components/WordSelector';\nimport { IoLogoGithub } from 'react-icons/io';\n\nimport { colors, breakpoints } from '../styles';\n\n// english only for now, TODO: add other languages\nimport WORDLIST from '../wordlists';\n\nimport {\n    ENTROPY_BITS_MAP,\n    LENGTH_OPTIONS,\n    getDetails,\n    getSeed,\n    generateRandomMnemonic,\n    zeroFill,\n} from '../utils';\nimport debounce from 'lodash.debounce';\n\nconst Container = styled.div`\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\n        Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',\n        'Segoe UI Symbol';\n    box-sizing: border-box;\n    div,\n    input {\n        box-sizing: inherit;\n    }\n    color: ${colors.textPrimary};\n    @media (${breakpoints.phone}) {\n        font-size: 13px;\n    }\n`;\n\nconst Title = styled.h1`\n    font-size: 24px;\n    font-weight: bold;\n    text-align: center;\n`;\n\nconst Header = styled.h2`\n    font-size: 20px;\n    margin-bottom: 4px;\n`;\n\nconst Subheader = styled.span`\n    font-size: 16px;\n    font-weight: normal;\n    color: ${colors.textSecondary};\n    margin-left: 8px;\n`;\n\nconst CenteredRow = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst CountContainer = styled.div`\n    display: flex;\n    border: 1px solid;\n    border-radius: 4px;\n    margin: 0 10px;\n`;\n\nconst RadioGroupLabel = styled.label`\n    margin: 8px 0;\n`;\n\nconst CountLabel = styled.label`\n    padding: 8px 16px;\n    cursor: pointer;\n    border-right: 1px solid;\n    &:hover {\n        background-color: ${colors.bgHover};\n    }\n    &.selected {\n        color: ${colors.textSelected};\n        background-color: ${colors.bgSelected};\n    }\n    &:first-child {\n        border-radius: 4px 0 0 4px;\n    }\n    &:last-child {\n        border-right: none;\n        border-radius: 0 4px 4px 0;\n    }\n`;\n\nconst CountRadio = styled.input.attrs(() => ({\n    type: 'radio',\n    name: 'wordcount',\n}))`\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n`;\n\nconst GenerateButton = styled.button`\n    padding: 6px 20px;\n    background-color: ${colors.bgAccent};\n    border: 2px solid ${colors.bgAccent};\n    color: ${colors.textAccent};\n    border-radius: 18px;\n    outline: none;\n    cursor: pointer;\n    font-size: 14px;\n    margin: 10px;\n    &:hover {\n        box-shadow: ${colors.bgAccent} 0 0 0 2px;\n    }\n    transition-property: box-shadow;\n    transition-duration: 0.1s;\n`;\n\nconst ResetButton = styled(GenerateButton)`\n    background-color: transparent;\n    color: ${colors.bgAccent};\n`;\n\nconst FlexRow = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    margin: 20px;\n    @media (${breakpoints.phone}) {\n        margin: 8px;\n    }\n`;\n\nconst FlexItem = styled.div`\n    flex: 0 0 16.6%;\n    padding: 8px;\n    @media (${breakpoints.tablet}) {\n        flex: 0 0 33.3%;\n    }\n`;\n\nconst DetailsContainer = styled.div`\n    margin: 20px;\n    input {\n        padding: 4px;\n        border: 1px solid;\n        border-radius: 3px;\n        margin: 4px 0;\n    }\n`;\n\nconst WordWithIndex = styled.div`\n    display: inline-block;\n    border: 1px solid;\n    border-radius: 3px;\n    padding: 4px;\n    margin: 4px;\n    margin-left: 0;\n    > div > span {\n        color: ${colors.textSecondary};\n        font-size: 13px;\n    }\n    > div:last-child {\n        font-size: 11px;\n    }\n`;\n\nconst DetailsLabel = styled.span`\n    display: block;\n    font-weight: bold;\n    font-size: 12px;\n`;\n\nconst LongString = styled.span`\n    display: inline-block;\n    word-break: break-all;\n    padding: 4px;\n    margin: 4px 0;\n    border: 1px solid;\n    border-radius: 3px;\n    background-color: ${colors.bgSecondary};\n`;\n\nconst WordCount = props => {\n    const { value, onChange } = props;\n    return (\n        <CenteredRow>\n            <RadioGroupLabel>Length</RadioGroupLabel>\n            <CountContainer>\n                {LENGTH_OPTIONS.map(count => {\n                    const isSelected = value === count;\n                    return (\n                        <CountLabel\n                            key={`wc${count}`}\n                            className={isSelected ? 'selected' : null}\n                        >\n                            <CountRadio\n                                key={count}\n                                value={count}\n                                checked={isSelected}\n                                onChange={() => onChange && onChange(count)}\n                            />\n                            <span>{count}</span>\n                        </CountLabel>\n                    );\n                })}\n            </CountContainer>\n        </CenteredRow>\n    );\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            wordCount: 24,\n            words: new Array(24),\n            wordList: WORDLIST,\n            validLastWords: [],\n            isCompleted: false,\n            seed: '',\n            passphrase: '',\n        };\n    }\n\n    handleCountChange = wordCount => {\n        const { words, wordList, passphrase } = this.state;\n        const updatedWords = [...new Array(wordCount)].map(\n            (val, i) => words[i]\n        );\n        const details = getDetails(updatedWords, wordList);\n        const { validLastWords, isCompleted } = details;\n        if (isCompleted) {\n            updatedWords[wordCount - 1] = validLastWords[0];\n        }\n        this.setState({\n            wordCount,\n            words: updatedWords,\n            ...getDetails(updatedWords, wordList),\n            seed: isCompleted ? getSeed(updatedWords, passphrase) : '',\n            passphrase: isCompleted ? passphrase : '',\n        });\n    };\n\n    handleGenerate = () => {\n        const { wordCount, wordList, passphrase } = this.state;\n        const words = generateRandomMnemonic(wordCount, wordList);\n        this.setState({\n            words,\n            ...getDetails(words, wordList),\n            seed: getSeed(words, passphrase),\n        });\n    };\n\n    handleReset = () => {\n        const { wordCount } = this.state;\n        this.setState({\n            words: new Array(wordCount),\n            isCompleted: false,\n            validLastWords: [],\n            seed: '',\n            passphrase: '',\n        });\n    };\n\n    handleChange = ({ word, index }) => {\n        const { wordCount, words, wordList, passphrase } = this.state;\n        const updatedWords = [...new Array(wordCount)].map((val, i) => {\n            return i === index ? word : words[i];\n        });\n        const details = getDetails(updatedWords, wordList);\n        const { validLastWords, isCompleted } = details;\n        if (isCompleted && index !== wordCount - 1) {\n            updatedWords[wordCount - 1] = validLastWords[0];\n        }\n\n        this.setState({\n            words: updatedWords,\n            ...getDetails(updatedWords, wordList),\n            seed: getSeed(updatedWords, passphrase),\n        });\n    };\n\n    handlePassphrase = e => {\n        this.handlePassphraseDebounce(e.target.value);\n    };\n\n    handlePassphraseDebounce = debounce(passphrase => {\n        const { words } = this.state;\n        this.setState({\n            seed: getSeed(words, passphrase),\n            passphrase,\n        });\n    }, 250);\n\n    renderWordWithIndex = (word, i) => {\n        const { wordList } = this.state;\n        const listIndex = wordList.indexOf(word);\n        const binary = zeroFill(listIndex.toString(2), 11);\n        return (\n            <WordWithIndex key={`wi${i}`}>\n                <div>\n                    <strong>{word}</strong> <span>{listIndex}</span>\n                </div>\n                <div>{binary}</div>\n            </WordWithIndex>\n        );\n    };\n\n    render() {\n        const {\n            words,\n            wordCount,\n            wordList,\n            validLastWords,\n            entropy,\n            checksum,\n            seed,\n            isCompleted,\n        } = this.state;\n        // console.log(this.state);\n        // console.log(words.join(' '));\n        const wordSelectors = [];\n        const entropyBits = ENTROPY_BITS_MAP[wordCount];\n        const leftoverBits = entropyBits - 11 * (wordCount - 1);\n        const totalBits = entropyBits + (checksum || {}).length;\n\n        for (let i = 0; i < wordCount; i++) {\n            let isLastWord = i === wordCount - 1;\n            wordSelectors.push(\n                <FlexItem key={`word${i}`}>\n                    <WordSelector\n                        index={i}\n                        indexDisplay={i + 1}\n                        word={words[i] || ''}\n                        wordList={isLastWord ? validLastWords : wordList}\n                        disabled={validLastWords.length === 0}\n                        onChange={this.handleChange}\n                    />\n                </FlexItem>\n            );\n        }\n\n        return (\n            <Container>\n                <Helmet>\n                    <title>BIP39 Mnemonic Builder</title>\n                    <meta\n                        name=\"description\"\n                        content=\"Create a BIP39 custom recovery seed phrase for your bitcoin wallet.\"\n                    ></meta>\n                </Helmet>\n                <Title>BIP39 Mnemonic Builder</Title>\n                <CenteredRow>\n                    <WordCount\n                        value={wordCount}\n                        onChange={this.handleCountChange}\n                    />\n                    <GenerateButton onClick={this.handleGenerate}>\n                        Generate Random\n                    </GenerateButton>\n                    <ResetButton onClick={this.handleReset}>Reset</ResetButton>\n                </CenteredRow>\n                <FlexRow>{wordSelectors}</FlexRow>\n                {isCompleted ? (\n                    <DetailsContainer>\n                        <Header>\n                            Entropy - {entropyBits} bits\n                            <Subheader>\n                                {wordCount - 1} words &times; 11 bits ={' '}\n                                {entropyBits - leftoverBits} bits +{' '}\n                                {leftoverBits} extra bits ={' '}\n                                {Math.pow(2, leftoverBits)} valid last words\n                            </Subheader>\n                        </Header>\n                        <LongString>{entropy.hex}</LongString>\n                        <Header>\n                            Checksum - {checksum.length} bits\n                            <Subheader>\n                                First {checksum.length} bits of SHA-256 hash of\n                                entropy\n                            </Subheader>\n                        </Header>\n                        <div>\n                            <DetailsLabel>Hash</DetailsLabel>\n                            <LongString>{checksum.hash}</LongString>\n                        </div>\n                        <div>\n                            <DetailsLabel>\n                                First {checksum.length} bits\n                            </DetailsLabel>\n                            <LongString>{checksum.firstBits}</LongString>\n                        </div>\n                        <Header>\n                            Result - {totalBits} bits\n                            <Subheader>\n                                Entropy + checksum = {wordCount} words &times;\n                                11 bits = {totalBits}. Word / index / binary\n                                index.\n                            </Subheader>\n                        </Header>\n                        <div>{words.map(this.renderWordWithIndex)}</div>\n                        <Header>\n                            Seed - 512 bits\n                            <Subheader>\n                                PBKDF2 - SHA-512 / 2048 iterations\n                            </Subheader>\n                        </Header>\n                        <div>\n                            <DetailsLabel>Optional Passphrase</DetailsLabel>\n                            <input\n                                type=\"text\"\n                                onChange={this.handlePassphrase}\n                            />\n                        </div>\n                        <LongString>{seed}</LongString>\n                    </DetailsContainer>\n                ) : null}\n                <CenteredRow>\n                    <a href=\"https://github.com/mikeygee/bip39\"><IoLogoGithub size={20} /></a>\n                </CenteredRow>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n"],"sourceRoot":""}