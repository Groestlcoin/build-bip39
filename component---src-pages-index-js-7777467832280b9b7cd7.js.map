{"version":3,"sources":["webpack:///./src/styles.js","webpack:///./src/components/WordSelector.js","webpack:///./src/wordlists/index.js","webpack:///./src/utils.js","webpack:///./src/pages/index.js"],"names":["colors","breakpoints","Container","styled","div","withConfig","displayName","componentId","WordSelect","input","WordIndexLabel","label","SelectOpenIcon","IoIosArrowDown","OptionsContainer","OptionsOverlay","OverlayLabel","SearchInput","SearchIcon","IoIosSearch","SearchClearIcon","IoIosCloseCircle","isSmallScreen","window","innerWidth","WordOption","handleClick","_this$props","_this","props","word","onSelect","handleMouseEnter","_this$props2","index","onHighlight","render","_this$props3","this","highlighted","selected","style","react_default","a","createElement","role","onMouseEnter","className","cx","onClick","React","Component","WordSelector","_this2","_React$Component2","call","handleOutsideClick","e","state","showOptions","containerRef","current","contains","target","hideOptions","handleOptionsClick","optionsRef","_this2$props","wordList","setState","highlightedOptionIndex","indexOf","scrollToSelection","search","options","searchRef","focus","listRef","scrollToItem","handleSearch","query","value","normalized","toLowerCase","filter","sort","b","handleClearSearch","stopPropagation","handleKeyDown","key","shiftKey","_this2$state","length","handleSelect","selectRef","handleHover","i","selectedWord","_this2$props2","onChange","renderWordOption","_ref","data","WordSelector_WordOption","createRef","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","_this$state","_this$props4","indexDisplay","inputName","isOverlay","Options","listHeight","innerHeight","itemHeight","offsetStyle","marginTop","ref","type","name","placeholder","autoComplete","readOnly","onKeyDown","htmlFor","index_esm","itemData","itemCount","itemSize","height","width","innerElementType","border","overflowX","position","zIndex","backgroundColor","en","require","ENTROPY_BITS_MAP","24","21","18","15","12","LENGTH_OPTIONS","zeroFill","str","targetLen","binaryToHex","binaryString","match","map","chunk","parseInt","toString","join","getDetails","words","mnemonicLength","selectedWords","selectedLength","isCompleted","entropyLength","Error","extraBits","checksumLength","validLastWordCount","Math","pow","binaryStringWithoutLastWord","substr","entropyBinary","entropy","binary","hex","checksum","hash","shajs","update","digest","firstBits","validLastWords","_toConsumableArray","Array","val","binaryIndex","Number","mnemonicFromEntropy","hexString","entropyHash","checksumHash","result","decimalIndex","push","getSeed","passphrase","pbkdf2","pbkdf2Sync","reduce","prev","curr","GlobalStyles","createGlobalStyle","_templateObject","Title","h1","Header","h2","Subheader","span","CenteredRow","CountContainer","RadioGroupLabel","CountLabel","CountRadio","attrs","GenerateButton","button","ResetButton","FlexRow","FlexItem","DetailsContainer","WordWithIndex","DetailsLabel","LongString","GithubLink","IoLogoGithub","WordCount","count","isSelected","checked","App","_React$Component","handleCountChange","wordCount","entropyInput","updatedWords","pages_toConsumableArray","details","Object","assign","seed","handleGenerate","_this$state2","crypto","msCrypto","randomNumbersRequired","randomNumbers","getRandomValues","Uint32Array","hexEncoded","forEach","rand","generateRandomMnemonic","textAreaRef","handleReset","handleEntropy","handleEntropyDebounce","debounce","_this$state3","handleChange","_this$state4","handlePassphrase","handlePassphraseDebounce","renderWordWithIndex","listIndex","WORDLIST","_this$state5","wordSelectors","entropyBits","leftoverBits","totalBits","isLastWord","components_WordSelector","disabled","Helmet","content","pages_WordCount","href","rel","size"],"mappings":"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","file":"component---src-pages-index-js-7777467832280b9b7cd7.js","sourcesContent":["// color pallete\nconst blue = '#0060cb';\nconst grayLight = '#eee';\nconst grayMedium = '#999';\nconst grayDark = '#222';\nconst white = '#fff';\nconst dimmed = 'rgba(0, 0, 0, 0.65)';\n\nexport const colors = {\n    bgPrimary: white,\n    bgSecondary: grayLight,\n    bgAccent: blue,\n    bgSelected: blue,\n    bgInverse: grayDark,\n    bgHover: grayLight,\n    bgOverlay: dimmed,\n    textPrimary: grayDark,\n    textSecondary: grayMedium,\n    textAccent: white,\n    textSelected: white,\n    textInverse: white,\n};\n\nexport const breakpoints = {\n    phone: 'max-width: 420px',\n    tablet: 'max-width: 800px',\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FixedSizeList as List } from 'react-window';\nimport { IoIosCloseCircle, IoIosArrowDown, IoIosSearch } from 'react-icons/io';\nimport cx from 'classnames';\n\nimport { colors, breakpoints } from '../styles';\n\nconst Container = styled.div`\n    position: relative;\n    ul {\n        margin: 0;\n        padding: 0;\n        > li {\n            display: flex;\n            align-items: center;\n            cursor: default;\n            &.highlighted,\n            &:hover {\n                background-color: ${colors.bgHover};\n            }\n            &.selected button {\n                color: ${colors.textSelected};\n                background-color: ${colors.bgSelected};\n            }\n            > button {\n                border: none;\n                outline: none;\n                background-color: transparent;\n                width: 100%;\n                height: 100%;\n                text-align: left;\n                font-size: 16px;\n                padding-left: 10px;\n                touch-action: manipulation;\n            }\n        }\n    }\n`;\n\nconst WordSelect = styled.input`\n    display: block;\n    border: 1px solid;\n    border-radius: 3px;\n    font-size: 16px;\n    padding: 8px 14px;\n    width: 100%;\n    cursor: pointer;\n    @media (${breakpoints.phone}) {\n        font-size: 13px;\n        padding: 6px 12px;\n    }\n`;\n\nconst WordIndexLabel = styled.label`\n    position: absolute;\n    top: -8px;\n    left: -8px;\n    height: 16px;\n    width: 16px;\n    font-size: 10px;\n    border-radius: 3px;\n    background-color: ${colors.bgInverse};\n    color: ${colors.textInverse};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst SelectOpenIcon = styled(IoIosArrowDown)`\n    position: absolute;\n    top: 5px;\n    right: 0;\n    padding: 4px;\n    font-size: 20px;\n    cursor: pointer;\n    @media (${breakpoints.phone}) {\n        top: 6px;\n        font-size: 13px;\n    }\n`;\n\nconst OptionsContainer = styled.div`\n    position: absolute;\n    width: 100%;\n    z-index: 1;\n    margin-top: 2px;\n`;\n\nconst OptionsOverlay = styled.div`\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 2;\n    background-color: ${colors.bgOverlay};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    > div {\n        position: relative;\n        width: 60%;\n    }\n`;\n\nconst OverlayLabel = styled.label`\n    position: absolute;\n    top: -20px;\n    display: block;\n    background-color: ${colors.bgInverse};\n    color: ${colors.textInverse};\n    padding: 2px;\n    border-radius: 3px;\n    width: 60px;\n    text-align: center;\n`;\n\nconst SearchInput = styled.input`\n    display: block;\n    outline: none;\n    width: 100%;\n    border: 1px solid ${colors.textSecondary};\n    border-width: 1px 1px 0;\n    border-radius: 0;\n    margin: 0;\n    padding: 8px 24px;\n    font-size: 12px;\n    @media (${breakpoints.tablet}) {\n        font-size: 16px;\n    }\n`; // prevent input zoom on iPhone\n\nconst SearchIcon = styled(IoIosSearch)`\n    position: absolute;\n    top: 8px;\n    left: 4px;\n    font-size: 16px;\n    @media (${breakpoints.tablet}) {\n        top: 12px;\n    }\n`;\n\nconst SearchClearIcon = styled(IoIosCloseCircle)`\n    position: absolute;\n    top: 5px;\n    right: 0;\n    padding: 4px;\n    color: ${colors.textSecondary};\n    font-size: 16px;\n    cursor: pointer;\n`;\n\nconst isSmallScreen = () =>\n    typeof window !== 'undefined' && window.innerWidth < 420;\n\nclass WordOption extends React.Component {\n    handleClick = () => {\n        const { word, onSelect } = this.props;\n        onSelect && onSelect(word);\n    };\n\n    handleMouseEnter = () => {\n        const { index, onHighlight } = this.props;\n        onHighlight && onHighlight(index);\n    };\n\n    render() {\n        const { word, highlighted, selected, style } = this.props;\n        return (\n            <li\n                role=\"menuitem\"\n                onMouseEnter={this.handleMouseEnter}\n                className={cx({\n                    highlighted,\n                    selected,\n                })}\n                style={style}\n            >\n                <button onClick={this.handleClick}>{word}</button>\n            </li>\n        );\n    }\n}\n\nclass WordSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.containerRef = React.createRef();\n        this.listRef = React.createRef();\n        this.selectRef = React.createRef();\n        this.searchRef = React.createRef();\n        this.optionsRef = React.createRef();\n        this.state = {\n            options: props.wordList,\n            search: '',\n            showOptions: false,\n            highlightedOptionIndex: null,\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('click', this.handleOutsideClick);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('click', this.handleOutsideClick);\n    }\n\n    componentDidUpdate(prevProps) {\n        const wordList = this.props.wordList;\n        if (prevProps.wordList !== wordList) {\n            this.setState({\n                options: wordList,\n            });\n        }\n    }\n\n    handleOutsideClick = e => {\n        const { showOptions } = this.state;\n        if (showOptions && !this.containerRef.current.contains(e.target)) {\n            this.hideOptions();\n        }\n    };\n\n    handleOptionsClick = e => {\n        if (isSmallScreen() && !this.optionsRef.current.contains(e.target)) {\n            this.hideOptions();\n        }\n    };\n\n    showOptions = e => {\n        const { word, wordList } = this.props;\n        this.setState(\n            {\n                showOptions: true,\n                highlightedOptionIndex: word ? wordList.indexOf(word) : null,\n            },\n            this.scrollToSelection\n        );\n    };\n\n    hideOptions = () => {\n        this.setState({\n            showOptions: false,\n            highlightedOptionIndex: null,\n            search: '',\n            options: this.props.wordList,\n        });\n    };\n\n    scrollToSelection = () => {\n        const { options } = this.state;\n        const { word } = this.props;\n        if (!isSmallScreen()) {\n            this.searchRef.current.focus();\n        }\n        if (word) {\n            const index = options.indexOf(word);\n            this.listRef.current.scrollToItem(index, 'center');\n        }\n    };\n\n    handleClick = e => {\n        const { showOptions } = this.state;\n        if (!showOptions) {\n            this.showOptions();\n        } else {\n            this.hideOptions();\n        }\n    };\n\n    handleSearch = e => {\n        const query = e.target.value || '';\n        const normalized = query.toLowerCase();\n        const { wordList } = this.props;\n        this.setState({\n            search: query,\n            options:\n                query === ''\n                    ? wordList\n                    : wordList\n                          .filter(word => word.indexOf(normalized) >= 0)\n                          .sort((a, b) => {\n                              return (\n                                  a.indexOf(normalized) - b.indexOf(normalized)\n                              );\n                          }),\n            highlightedOptionIndex: 0,\n        });\n        this.listRef.current.scrollToItem(0);\n    };\n\n    handleClearSearch = e => {\n        e.stopPropagation();\n        this.setState(\n            {\n                search: '',\n                options: this.props.wordList,\n            },\n            this.showOptions\n        );\n    };\n\n    handleKeyDown = e => {\n        const { key, shiftKey, target } = e;\n        const { options, showOptions, highlightedOptionIndex } = this.state;\n        if (!showOptions && (key === 'Enter' || key === 'ArrowDown')) {\n            this.showOptions();\n            return;\n        }\n        if (key === 'ArrowDown') {\n            if (highlightedOptionIndex === null) {\n                this.setState({ highlightedOptionIndex: 0 });\n            } else if (highlightedOptionIndex < options.length - 1) {\n                this.setState({\n                    highlightedOptionIndex: highlightedOptionIndex + 1,\n                });\n                this.listRef.current.scrollToItem(highlightedOptionIndex + 1);\n            }\n        } else if (key === 'ArrowUp' && highlightedOptionIndex > 0) {\n            this.setState({\n                highlightedOptionIndex: highlightedOptionIndex - 1,\n            });\n            this.listRef.current.scrollToItem(highlightedOptionIndex - 1);\n        } else if (key === 'Enter') {\n            const word = options[highlightedOptionIndex];\n            if (word) {\n                this.handleSelect(word);\n            } else {\n                this.hideOptions();\n                this.selectRef.current.focus();\n            }\n        } else if (key === 'Escape') {\n            this.hideOptions();\n            this.selectRef.current.focus();\n        } else if (\n            key === 'Tab' &&\n            ((!shiftKey && target === this.searchRef.current) ||\n                (shiftKey && target === this.selectRef.current))\n        ) {\n            // hide options if tabbing out of component\n            this.hideOptions();\n        }\n    };\n\n    handleHover = i => {\n        this.setState({\n            highlightedOptionIndex: i,\n        });\n    };\n\n    handleSelect = selectedWord => {\n        const { onChange, wordList, word, index } = this.props;\n        this.setState({\n            search: '',\n            options: wordList,\n            highlightedOptionIndex: index,\n            showOptions: false,\n        });\n        if (selectedWord !== word) {\n            onChange &&\n                onChange({\n                    word: selectedWord,\n                    index,\n                });\n        }\n    };\n\n    renderWordOption = ({ data, index, style }) => {\n        const { highlightedOptionIndex } = this.state;\n        const selectedWord = this.props.word;\n        const word = data[index];\n        return (\n            <WordOption\n                style={style}\n                word={word}\n                index={index}\n                selected={selectedWord === word}\n                highlighted={index === highlightedOptionIndex}\n                onHighlight={this.handleHover}\n                onSelect={this.handleSelect}\n            />\n        );\n    };\n\n    render() {\n        const { options, search, showOptions } = this.state;\n        const { index, indexDisplay, word } = this.props;\n        const inputName = `word${index}`;\n        const isOverlay = isSmallScreen();\n        const Options = isOverlay ? OptionsOverlay : OptionsContainer;\n        const listHeight = isOverlay ? window.innerHeight * 0.6 : 250;\n        const itemHeight = isOverlay ? 32 : 26;\n        const offsetStyle = isOverlay\n            ? {\n                  marginTop: listHeight * -1,\n              }\n            : null;\n\n        return (\n            <Container ref={this.containerRef}>\n                <WordSelect\n                    ref={this.selectRef}\n                    type=\"text\"\n                    name={inputName}\n                    placeholder={`Word ${indexDisplay}`}\n                    autoComplete=\"off\"\n                    readOnly={true}\n                    value={word}\n                    onClick={this.handleClick}\n                    onKeyDown={this.handleKeyDown}\n                />\n                <WordIndexLabel htmlFor={inputName}>\n                    {indexDisplay}\n                </WordIndexLabel>\n                <SelectOpenIcon onClick={this.handleClick} />\n                {showOptions ? (\n                    <Options onClick={this.handleOptionsClick}>\n                        <div ref={this.optionsRef} style={offsetStyle}>\n                            {isOverlay ? (\n                                <OverlayLabel>Word {indexDisplay}</OverlayLabel>\n                            ) : null}\n                            <SearchInput\n                                ref={this.searchRef}\n                                type=\"text\"\n                                value={search}\n                                onChange={this.handleSearch}\n                                onKeyDown={this.handleKeyDown}\n                            />\n                            <SearchIcon />\n                            {search !== '' ? (\n                                <SearchClearIcon\n                                    onClick={this.handleClearSearch}\n                                />\n                            ) : null}\n                            <List\n                                ref={this.listRef}\n                                itemData={options}\n                                itemCount={options.length}\n                                itemSize={itemHeight}\n                                height={listHeight}\n                                width=\"100%\"\n                                innerElementType=\"ul\"\n                                style={{\n                                    border: '1px solid',\n                                    overflowX: 'hidden',\n                                    position: 'absolute',\n                                    zIndex: 1,\n                                    backgroundColor: colors.bgPrimary,\n                                }}\n                            >\n                                {this.renderWordOption}\n                            </List>\n                        </div>\n                    </Options>\n                ) : null}\n            </Container>\n        );\n    }\n}\n\nexport default WordSelector;\n","export const en = require('./english.json');\n\nexport default en;\n","import shajs from 'sha.js';\nimport pbkdf2 from 'pbkdf2';\n\nexport const ENTROPY_BITS_MAP = {\n    '24': 256,\n    '21': 224,\n    '18': 192,\n    '15': 160,\n    '12': 128,\n};\n\nexport const LENGTH_OPTIONS = [24, 21, 18, 15, 12];\n\nexport function zeroFill(str = '', targetLen = 0) {\n    while (str.length < targetLen) {\n        str = '0' + str;\n    }\n    return str;\n}\n\n/**\n * Converts binary strings to hex strings in 32 bit chunks. Only works with strings with length divisible by 32 for this specific use case.\n *\n * @param {string} binaryString - string of length divisible by 32, consisting of 0's and 1's\n * @return {string} - string encoded as hexidecimal\n *\n */\nexport function binaryToHex(binaryString = '') {\n    const chunks = binaryString.match(/.{1,32}/g) || []; // split into array of 32 bit chunks\n    return chunks\n        .map(chunk => zeroFill(parseInt(chunk, 2).toString(16), 8))\n        .join('');\n}\n\n/**\n * Converts hex strings to binary strings in 32 bit chunks. Only works with strings with length divisible by 8 for this specific use case.\n *\n * @param {string} hexString - string of length divisible by 8, consisting of valid hex characters [0-9a-f]\n * @return {string} - string encoded as binary\n *\n */\nexport function hexToBinary(hexString = '') {\n    const chunks = hexString.match(/.{1,8}/g) || []; // split into array of 32 bit chunks\n    return chunks\n        .map(chunk => zeroFill(parseInt(chunk, 16).toString(2), 32))\n        .join('');\n}\n\n/**\n * Maps word selections back to raw data, and determines valid last words (due to them being based on a checksum)\n *\n * @param {string[]} words - Array of words, must have length of desired mnemonic\n * @param {string[]} wordList - BIP 39 wordlist, 2048 words to choose from\n * @return {{ isCompleted: boolean, entropy: { binary: string, hex: string }, checksum: { hash: string, firstBits: string, length: number }, validLastWords: string[]}} isCompleted: no empty or falsy values in the words array, entropy: binary and hex encodings of concatenated word indexes, checksum: SHA-256 hash of entropy, validLastWords: given n-1 words, a list of words that are valid for the last word\n *\n */\nexport function getDetails(words = [], wordList = []) {\n    const mnemonicLength = words.length;\n    const selectedWords = words.filter(word => !!word);\n    const selectedLength = selectedWords.length;\n    const isCompleted = mnemonicLength === selectedLength;\n\n    if (selectedLength < mnemonicLength - 1) {\n        return {\n            isCompleted,\n        };\n    }\n\n    const entropyLength = ENTROPY_BITS_MAP[mnemonicLength];\n    if (!entropyLength) {\n        throw new Error(\n            'Invalid words array. Must be one of the following lengths: ' +\n                LENGTH_OPTIONS.join()\n        );\n    }\n    const extraBits = entropyLength - 11 * (mnemonicLength - 1);\n    const checksumLength = mnemonicLength * 11 - entropyLength;\n    const validLastWordCount = Math.pow(2, extraBits);\n\n    const binaryIndexes = selectedWords.map(word => {\n        const index = wordList.indexOf(word);\n        return zeroFill(index.toString(2), 11);\n    });\n    const binaryString = binaryIndexes.join('');\n    const binaryStringWithoutLastWord = binaryString.substr(\n        0,\n        entropyLength - extraBits\n    );\n    const entropyBinary = binaryString.substr(0, entropyLength);\n    const entropy = isCompleted\n        ? {\n              binary: entropyBinary,\n              hex: binaryToHex(entropyBinary),\n          }\n        : {};\n    const checksum = isCompleted\n        ? {\n              hash: shajs('sha256')\n                  .update(binaryToHex(entropyBinary), 'hex')\n                  .digest('hex'),\n              firstBits: binaryString.substr(entropyLength, checksumLength),\n              length: checksumLength,\n          }\n        : {};\n\n    const validLastWords = [...new Array(validLastWordCount)].map((val, i) => {\n        const binaryIndex = zeroFill(Number(i).toString(2), extraBits);\n        const hex = binaryToHex(binaryStringWithoutLastWord + binaryIndex);\n        const hash = shajs('sha256')\n            .update(hex, 'hex')\n            .digest('hex');\n        const checksum = zeroFill(\n            parseInt(hash.substr(0, 2), 16).toString(2),\n            8\n        ).substr(0, checksumLength);\n        const wordIndex = binaryIndex + checksum;\n        return wordList[parseInt(wordIndex, 2)];\n    });\n\n    return {\n        isCompleted,\n        entropy,\n        checksum,\n        validLastWords,\n    };\n}\n\n/**\n * Converts arbitrary utf8 encoded string into a mnemonic by using the SHA256 hash of the string as the entropy. If chosen mnemonic length is less than 24, use the first n bits, where n is the entropy length in bits.\n *\n * @param {string} entropy - utf8 string\n * @param {number} length - desired mnemonic length in words\n * @param {string[]} wordList - BIP 39 wordlist, 2048 words to choose from\n * @return {string[]} - mnemonic as an array of words\n *\n */\nexport function mnemonicFromEntropy(entropy = '', length = 24, wordList = []) {\n    if (wordList.length === 0) {\n        throw new Error('Array of 2048 words is required');\n    }\n    const entropyLength = ENTROPY_BITS_MAP[length];\n    const checksumLength = length * 11 - entropyLength;\n\n    let entropyHash = shajs('sha256')\n        .update(entropy, 'utf8')\n        .digest('hex');\n    let binary = hexToBinary(entropyHash);\n\n    if (length < 24) {\n        binary = binary.substr(0, entropyLength);\n        entropyHash = binaryToHex(binary);\n    }\n\n    // get checksum (first n bits of sha256 hash to complete 11 bit word indexes)\n    const checksumHash = shajs('sha256')\n        .update(entropyHash, 'hex')\n        .digest('hex');\n    const checksum = zeroFill(\n        parseInt(checksumHash.substr(0, 2), 16).toString(2),\n        8\n    ).substr(0, checksumLength);\n    const result = binary + checksum;\n    // map to words\n    const words = [];\n    for (let i = 0; i < length; i++) {\n        let binaryIndex = result.substr(i * 11, 11);\n        let decimalIndex = parseInt(binaryIndex, 2);\n        words.push(wordList[decimalIndex]);\n    }\n    return words;\n}\n\nexport function generateRandomMnemonic(length = 24, wordList = []) {\n    if (wordList.length === 0) {\n        throw new Error('Array of 2048 words is required');\n    }\n    const crypto = window.crypto || window.msCrypto;\n    const entropyLength = ENTROPY_BITS_MAP[length];\n    const checksumLength = length * 11 - entropyLength;\n    // js random number limited to 32 bits, so need to concat for larger number\n    const randomNumbersRequired = entropyLength / 32;\n    const randomNumbers = crypto.getRandomValues(\n        new Uint32Array(randomNumbersRequired)\n    );\n    let entropy = '';\n    let hexEncoded = '';\n\n    randomNumbers.forEach(rand => {\n        // convert to binary and hex strings\n        let binary = rand.toString(2);\n        let hex = rand.toString(16);\n        // left pad 0's\n        binary = zeroFill(binary, 32);\n        hex = zeroFill(hex, 8);\n        entropy += binary;\n        hexEncoded += hex;\n    });\n\n    // get checksum (first n bits of sha256 hash to complete 11 bit word indexes)\n    const hash = shajs('sha256')\n        .update(hexEncoded, 'hex')\n        .digest('hex');\n    const checksum = zeroFill(\n        parseInt(hash.substr(0, 2), 16).toString(2),\n        8\n    ).substr(0, checksumLength);\n    const result = entropy + checksum;\n    // map to words\n    const words = [];\n    for (let i = 0; i < length; i++) {\n        let binaryIndex = result.substr(i * 11, 11);\n        let decimalIndex = parseInt(binaryIndex, 2);\n        words.push(wordList[decimalIndex]);\n    }\n    return words;\n}\n\nexport function getSeed(words = [], passphrase = '') {\n    return pbkdf2\n        .pbkdf2Sync(\n            words.join(' '),\n            'mnemonic' + (passphrase || ''),\n            2048,\n            64,\n            'sha512'\n        )\n        .reduce((prev, curr) => prev + zeroFill(curr.toString(16), 2), '');\n}\n","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Helmet } from 'react-helmet';\n\nimport WordSelector from '../components/WordSelector';\nimport { IoLogoGithub } from 'react-icons/io';\n\nimport { colors, breakpoints } from '../styles';\n\n// english only for now, TODO: add other languages\nimport WORDLIST from '../wordlists';\n\nimport {\n    ENTROPY_BITS_MAP,\n    LENGTH_OPTIONS,\n    getDetails,\n    getSeed,\n    generateRandomMnemonic,\n    mnemonicFromEntropy,\n    zeroFill,\n} from '../utils';\nimport debounce from 'lodash.debounce';\n\nconst GlobalStyles = createGlobalStyle`\n    body {\n        margin: 0;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\n            Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',\n            'Segoe UI Symbol';\n        box-sizing: border-box;\n        div, input, textarea\n        {\n            box-sizing: inherit;\n        }\n        color: ${colors.textPrimary};\n        @media (${breakpoints.phone}) {\n            font-size: 13px;\n        }\n        input, textarea {\n            -webkit-appearance: none;\n        }\n    }\n`;\n\nconst Title = styled.h1`\n    font-size: 24px;\n    font-weight: bold;\n    text-align: center;\n`;\n\nconst Header = styled.h2`\n    font-size: 20px;\n    margin-bottom: 4px;\n`;\n\nconst Subheader = styled.span`\n    font-size: 16px;\n    font-weight: normal;\n    color: ${colors.textSecondary};\n    margin-left: 8px;\n`;\n\nconst CenteredRow = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    > textarea {\n        border: 1px solid ${colors.textPrimary};\n        border-radius: 3px;\n        width: 300px;\n        height: 40px;\n        margin-top: 8px;\n        @media (${breakpoints.phone}) {\n            font-size: 16px;\n        }\n    }\n`;\n\nconst CountContainer = styled.div`\n    display: flex;\n    border: 1px solid;\n    border-radius: 4px;\n    margin: 0 10px;\n`;\n\nconst RadioGroupLabel = styled.label`\n    margin: 8px 0;\n`;\n\nconst CountLabel = styled.label`\n    padding: 8px 16px;\n    cursor: pointer;\n    border-right: 1px solid;\n    &:hover {\n        background-color: ${colors.bgHover};\n    }\n    &.selected {\n        color: ${colors.textSelected};\n        background-color: ${colors.bgSelected};\n    }\n    &:first-child {\n        border-radius: 4px 0 0 4px;\n    }\n    &:last-child {\n        border-right: none;\n        border-radius: 0 4px 4px 0;\n    }\n`;\n\nconst CountRadio = styled.input.attrs(() => ({\n    type: 'radio',\n    name: 'wordcount',\n}))`\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n`;\n\nconst GenerateButton = styled.button`\n    padding: 6px 20px;\n    background-color: ${colors.bgAccent};\n    border: 2px solid ${colors.bgAccent};\n    color: ${colors.textAccent};\n    border-radius: 18px;\n    outline: none;\n    cursor: pointer;\n    font-size: 14px;\n    margin: 10px;\n    &:hover {\n        box-shadow: ${colors.bgAccent} 0 0 0 2px;\n    }\n    transition-property: box-shadow;\n    transition-duration: 0.1s;\n`;\n\nconst ResetButton = styled(GenerateButton)`\n    background-color: transparent;\n    color: ${colors.bgAccent};\n`;\n\nconst FlexRow = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    margin: 20px;\n    @media (${breakpoints.phone}) {\n        margin: 8px;\n    }\n`;\n\nconst FlexItem = styled.div`\n    flex: 0 0 16.6%;\n    padding: 8px;\n    @media (${breakpoints.tablet}) {\n        flex: 0 0 33.3%;\n    }\n`;\n\nconst DetailsContainer = styled.div`\n    margin: 20px;\n    input {\n        padding: 4px;\n        border: 1px solid;\n        border-radius: 3px;\n        margin: 4px 0;\n        font-size: 16px;\n    }\n    @media (${breakpoints.phone}) {\n        margin: 8px;\n    }\n`;\n\nconst WordWithIndex = styled.div`\n    display: inline-block;\n    border: 1px solid;\n    border-radius: 3px;\n    padding: 4px;\n    margin: 4px;\n    margin-left: 0;\n    > div > span {\n        color: ${colors.textSecondary};\n        font-size: 13px;\n    }\n    > div:last-child {\n        font-size: 11px;\n    }\n`;\n\nconst DetailsLabel = styled.span`\n    display: block;\n    font-weight: bold;\n    font-size: 12px;\n`;\n\nconst LongString = styled.span`\n    display: inline-block;\n    word-break: break-all;\n    padding: 4px;\n    margin: 4px 0;\n    border: 1px solid;\n    border-radius: 3px;\n    background-color: ${colors.bgSecondary};\n`;\n\nconst GithubLink = styled(IoLogoGithub)`\n    color: ${colors.textPrimary};\n`;\n\nconst WordCount = props => {\n    const { value, onChange } = props;\n    return (\n        <CenteredRow>\n            <RadioGroupLabel>Length</RadioGroupLabel>\n            <CountContainer>\n                {LENGTH_OPTIONS.map(count => {\n                    const isSelected = value === count;\n                    return (\n                        <CountLabel\n                            key={`wc${count}`}\n                            className={isSelected ? 'selected' : null}\n                        >\n                            <CountRadio\n                                key={count}\n                                value={count}\n                                checked={isSelected}\n                                onChange={() => onChange && onChange(count)}\n                            />\n                            <span>{count}</span>\n                        </CountLabel>\n                    );\n                })}\n            </CountContainer>\n        </CenteredRow>\n    );\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textAreaRef = React.createRef();\n        this.state = {\n            wordCount: 24,\n            words: new Array(24),\n            wordList: WORDLIST,\n            validLastWords: [],\n            isCompleted: false,\n            entropyInput: '',\n            seed: '',\n            passphrase: '',\n        };\n    }\n\n    handleCountChange = wordCount => {\n        const { words, wordList, passphrase, entropyInput } = this.state;\n        const updatedWords = entropyInput\n            ? mnemonicFromEntropy(entropyInput, wordCount, wordList)\n            : [...new Array(wordCount)].map((val, i) => words[i]);\n        const details = getDetails(updatedWords, wordList);\n        const { validLastWords, isCompleted } = details;\n        if (isCompleted && !entropyInput) {\n            updatedWords[wordCount - 1] = validLastWords[0];\n        }\n        this.setState({\n            wordCount,\n            words: updatedWords,\n            validLastWords: [],\n            ...getDetails(updatedWords, wordList),\n            seed: isCompleted ? getSeed(updatedWords, passphrase) : '',\n            passphrase: isCompleted ? passphrase : '',\n        });\n    };\n\n    handleGenerate = () => {\n        const { wordCount, wordList, passphrase } = this.state;\n        const words = generateRandomMnemonic(wordCount, wordList);\n        this.setState({\n            words,\n            ...getDetails(words, wordList),\n            entropyInput: '',\n            seed: getSeed(words, passphrase),\n        });\n        this.textAreaRef.current.value = '';\n    };\n\n    handleReset = () => {\n        const { wordCount } = this.state;\n        this.setState({\n            words: new Array(wordCount),\n            isCompleted: false,\n            validLastWords: [],\n            entropyInput: '',\n            seed: '',\n            passphrase: '',\n        });\n        this.textAreaRef.current.value = '';\n    };\n\n    handleEntropy = e => {\n        this.handleEntropyDebounce(e.target.value);\n    };\n\n    handleEntropyDebounce = debounce(entropyInput => {\n        if (!entropyInput) {\n            this.handleReset();\n            return;\n        }\n        const { wordCount, wordList, passphrase } = this.state;\n        const words = mnemonicFromEntropy(entropyInput, wordCount, wordList);\n        this.setState({\n            words,\n            entropyInput,\n            ...getDetails(words, wordList),\n            seed: getSeed(words, passphrase),\n        });\n    }, 250);\n\n    handleChange = ({ word, index }) => {\n        const { wordCount, words, wordList, passphrase } = this.state;\n        const updatedWords = [...new Array(wordCount)].map((val, i) => {\n            return i === index ? word : words[i];\n        });\n        const details = getDetails(updatedWords, wordList);\n        const { validLastWords, isCompleted } = details;\n        if (isCompleted && index !== wordCount - 1) {\n            updatedWords[wordCount - 1] = validLastWords[0];\n        }\n\n        this.setState({\n            words: updatedWords,\n            ...getDetails(updatedWords, wordList),\n            entropyInput: '',\n            seed: getSeed(updatedWords, passphrase),\n        });\n        this.textAreaRef.current.value = '';\n    };\n\n    handlePassphrase = e => {\n        this.handlePassphraseDebounce(e.target.value);\n    };\n\n    handlePassphraseDebounce = debounce(passphrase => {\n        const { words } = this.state;\n        this.setState({\n            seed: getSeed(words, passphrase),\n            passphrase,\n        });\n    }, 250);\n\n    renderWordWithIndex = (word, i) => {\n        const { wordList } = this.state;\n        const listIndex = wordList.indexOf(word);\n        const binary = zeroFill(listIndex.toString(2), 11);\n        return (\n            <WordWithIndex key={`wi${i}`}>\n                <div>\n                    <strong>{word}</strong> <span>{listIndex}</span>\n                </div>\n                <div>{binary}</div>\n            </WordWithIndex>\n        );\n    };\n\n    render() {\n        const {\n            words,\n            wordCount,\n            wordList,\n            validLastWords,\n            entropy,\n            checksum,\n            seed,\n            isCompleted,\n        } = this.state;\n        // console.log(this.state);\n        // console.log(words.join(' '));\n        const wordSelectors = [];\n        const entropyBits = ENTROPY_BITS_MAP[wordCount];\n        const leftoverBits = entropyBits - 11 * (wordCount - 1);\n        const totalBits = entropyBits + (checksum || {}).length;\n\n        for (let i = 0; i < wordCount; i++) {\n            let isLastWord = i === wordCount - 1;\n            wordSelectors.push(\n                <FlexItem key={`word${i}`}>\n                    <WordSelector\n                        index={i}\n                        indexDisplay={i + 1}\n                        word={words[i] || ''}\n                        wordList={isLastWord ? validLastWords : wordList}\n                        disabled={validLastWords.length === 0}\n                        onChange={this.handleChange}\n                    />\n                </FlexItem>\n            );\n        }\n\n        return (\n            <div>\n                <GlobalStyles />\n                <Helmet>\n                    <title>BIP39 Mnemonic Builder</title>\n                    <meta\n                        name=\"description\"\n                        content=\"Create a BIP39 custom recovery seed phrase for your bitcoin wallet.\"\n                    ></meta>\n                </Helmet>\n                <Title>BIP39 Mnemonic Builder</Title>\n                <CenteredRow>\n                    <WordCount\n                        value={wordCount}\n                        onChange={this.handleCountChange}\n                    />\n                    <GenerateButton onClick={this.handleGenerate}>\n                        Generate Random\n                    </GenerateButton>\n                    <ResetButton onClick={this.handleReset}>Reset</ResetButton>\n                </CenteredRow>\n                <CenteredRow>\n                    <textarea\n                        ref={this.textAreaRef}\n                        placeholder=\"Optional user provided entropy. Type randomly here to generate a random mnemonic.\"\n                        onChange={this.handleEntropy}\n                    />\n                </CenteredRow>\n                <FlexRow>{wordSelectors}</FlexRow>\n                {isCompleted ? (\n                    <DetailsContainer>\n                        <Header>\n                            Entropy - {entropyBits} bits\n                            <Subheader>\n                                {wordCount - 1} words &times; 11 bits ={' '}\n                                {entropyBits - leftoverBits} bits +{' '}\n                                {leftoverBits} extra bits ={' '}\n                                {Math.pow(2, leftoverBits)} valid last words\n                            </Subheader>\n                        </Header>\n                        <LongString>{entropy.hex}</LongString>\n                        <Header>\n                            Checksum - {checksum.length} bits\n                            <Subheader>\n                                First {checksum.length} bits of SHA-256 hash of\n                                entropy\n                            </Subheader>\n                        </Header>\n                        <div>\n                            <DetailsLabel>Hash</DetailsLabel>\n                            <LongString>{checksum.hash}</LongString>\n                        </div>\n                        <div>\n                            <DetailsLabel>\n                                First {checksum.length} bits\n                            </DetailsLabel>\n                            <LongString>{checksum.firstBits}</LongString>\n                        </div>\n                        <Header>\n                            Result - {totalBits} bits\n                            <Subheader>\n                                Entropy + checksum = {wordCount} words &times;\n                                11 bits = {totalBits}. Word / index / binary\n                                index.\n                            </Subheader>\n                        </Header>\n                        <div>{words.map(this.renderWordWithIndex)}</div>\n                        <Header>\n                            Seed - 512 bits\n                            <Subheader>\n                                PBKDF2 - SHA-512 / 2048 iterations\n                            </Subheader>\n                        </Header>\n                        <div>\n                            <DetailsLabel>Optional Passphrase</DetailsLabel>\n                            <input\n                                type=\"text\"\n                                onChange={this.handlePassphrase}\n                            />\n                        </div>\n                        <LongString>{seed}</LongString>\n                    </DetailsContainer>\n                ) : null}\n                <CenteredRow>\n                    <a\n                        href=\"https://github.com/mikeygee/bip39\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        <GithubLink size={30} />\n                    </a>\n                </CenteredRow>\n            </div>\n        );\n    }\n}\n\nexport default App;\n"],"sourceRoot":""}